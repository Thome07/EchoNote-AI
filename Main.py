import os
import csv
import json
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import threading
import requests
import re
from pathlib import Path
from datetime import datetime
import hashlib

class ObsidianAIManager:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Obsidian AI Manager - Sistema de Anota√ß√µes Inteligente")
        self.root.geometry("1200x800")
        self.root.minsize(800, 600)
        
        # Configura√ß√£o de cores e estilo
        self.colors = {
            'bg': '#1e1e1e',
            'fg': '#ffffff',
            'accent': '#007acc',
            'secondary': '#2d2d2d',
            'success': '#28a745',
            'error': '#dc3545',
            'warning': '#ffc107'
        }
        
        self.configure_style()
        
        # Vari√°veis
        self.api_key = tk.StringVar()
        self.status_var = tk.StringVar(value="Pronto para usar")
        self.notes_data = []
        self.config_file = "obsidian_config.json"
        self.csv_file = "obsidian_notes.csv"
        self.obsidian_path = r"C:\Users\igort\OneDrive\Obsidian"
        
        # Carregar configura√ß√µes
        self.load_config()
        
        # Criar interface
        self.create_interface()
        
        # Verificar se h√° notas para carregar
        self.check_and_load_notes()
    
    def configure_style(self):
        """Configura o estilo visual da aplica√ß√£o"""
        self.root.configure(bg=self.colors['bg'])
        
        # Configurar ttk style
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configurar cores para widgets ttk
        style.configure('Custom.TFrame', background=self.colors['bg'])
        style.configure('Custom.TLabel', background=self.colors['bg'], foreground=self.colors['fg'])
        style.configure('Custom.TButton', background=self.colors['accent'], foreground='white')
        style.configure('Custom.TEntry', fieldbackground=self.colors['secondary'], foreground=self.colors['fg'])
    
    def create_interface(self):
        """Cria a interface gr√°fica principal"""
        # Frame principal
        main_frame = ttk.Frame(self.root, style='Custom.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Criar notebook para abas
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Aba principal - Chat com IA
        self.create_chat_tab()
        
        # Aba de configura√ß√µes
        self.create_config_tab()
        
        # Aba de gerenciamento de notas
        self.create_notes_tab()
        
        # Barra de status
        self.create_status_bar(main_frame)
    
    def create_chat_tab(self):
        """Cria a aba principal do chat com IA"""
        chat_frame = ttk.Frame(self.notebook, style='Custom.TFrame')
        self.notebook.add(chat_frame, text="üí¨ Chat com IA")
        
        # Frame superior - hist√≥rico do chat
        history_frame = ttk.LabelFrame(chat_frame, text="Conversa com IA", style='Custom.TFrame')
        history_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.chat_history = scrolledtext.ScrolledText(
            history_frame,
            wrap=tk.WORD,
            bg=self.colors['secondary'],
            fg=self.colors['fg'],
            font=('Consolas', 11),
            insertbackground=self.colors['fg']
        )
        self.chat_history.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Configurar tags para formata√ß√£o
        self.chat_history.tag_configure("user", foreground="#4CAF50", font=('Consolas', 11, 'bold'))
        self.chat_history.tag_configure("ai", foreground="#2196F3", font=('Consolas', 11, 'bold'))
        self.chat_history.tag_configure("system", foreground="#FF9800", font=('Consolas', 10, 'italic'))
        self.chat_history.tag_configure("reference", foreground="#9C27B0", font=('Consolas', 10))
        
        # Tags para formata√ß√£o Markdown
        self.chat_history.tag_configure("bold", font=('Consolas', 11, 'bold'))
        self.chat_history.tag_configure("italic", font=('Consolas', 11, 'italic'))
        self.chat_history.tag_configure("code", font=('Courier', 10), background="#3a3a3a", foreground="#f8f8f2")
        self.chat_history.tag_configure("code_block", font=('Courier', 10), background="#2d2d2d", foreground="#f8f8f2")
        self.chat_history.tag_configure("heading1", font=('Consolas', 14, 'bold'), foreground="#ffffff")
        self.chat_history.tag_configure("heading2", font=('Consolas', 13, 'bold'), foreground="#e0e0e0")
        self.chat_history.tag_configure("heading3", font=('Consolas', 12, 'bold'), foreground="#d0d0d0")
        self.chat_history.tag_configure("quote", font=('Consolas', 10, 'italic'), foreground="#b0b0b0", lmargin1=20)
        self.chat_history.tag_configure("link", foreground="#66d9ff", underline=True)
        
        # Frame inferior - entrada de mensagem
        input_frame = ttk.LabelFrame(chat_frame, text="Sua mensagem", style='Custom.TFrame')
        input_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Campo de entrada de texto
        self.message_entry = tk.Text(
            input_frame,
            height=3,
            wrap=tk.WORD,
            bg=self.colors['secondary'],
            fg=self.colors['fg'],
            font=('Consolas', 11),
            insertbackground=self.colors['fg']
        )
        self.message_entry.pack(fill=tk.X, padx=5, pady=5)
        
        # Binds para teclas
        self.message_entry.bind('<Return>', self.handle_enter)
        self.message_entry.bind('<Control-Return>', self.insert_newline)
        
        # Frame para bot√µes
        button_frame = ttk.Frame(input_frame, style='Custom.TFrame')
        button_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Bot√£o enviar
        send_btn = ttk.Button(
            button_frame,
            text="üì§ Enviar (Enter)",
            command=self.send_message,
            style='Custom.TButton'
        )
        send_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Bot√£o limpar chat
        clear_btn = ttk.Button(
            button_frame,
            text="üóëÔ∏è Limpar Chat",
            command=self.clear_chat,
            style='Custom.TButton'
        )
        clear_btn.pack(side=tk.LEFT)
        
        # Label com instru√ß√µes
        instruction_label = ttk.Label(
            button_frame,
            text="üí° Dica: Use Ctrl+Enter para nova linha, Enter para enviar",
            style='Custom.TLabel',
            font=('Arial', 9)
        )
        instruction_label.pack(side=tk.RIGHT)
    
    def create_config_tab(self):
        """Cria a aba de configura√ß√µes"""
        config_frame = ttk.Frame(self.notebook, style='Custom.TFrame')
        self.notebook.add(config_frame, text="‚öôÔ∏è Configura√ß√µes")
        
        # Frame da API
        api_frame = ttk.LabelFrame(config_frame, text="Configura√ß√£o da API Gemini", style='Custom.TFrame')
        api_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(api_frame, text="Chave da API:", style='Custom.TLabel').pack(anchor=tk.W, padx=5, pady=5)
        
        api_entry_frame = ttk.Frame(api_frame, style='Custom.TFrame')
        api_entry_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.api_entry = ttk.Entry(
            api_entry_frame,
            textvariable=self.api_key,
            show="*",
            style='Custom.TEntry',
            font=('Consolas', 10)
        )
        self.api_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        save_api_btn = ttk.Button(
            api_entry_frame,
            text="üíæ Salvar",
            command=self.save_api_key,
            style='Custom.TButton'
        )
        save_api_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        # Frame do diret√≥rio Obsidian
        dir_frame = ttk.LabelFrame(config_frame, text="Diret√≥rio do Obsidian", style='Custom.TFrame')
        dir_frame.pack(fill=tk.X, padx=10, pady=10)
        
        dir_entry_frame = ttk.Frame(dir_frame, style='Custom.TFrame')
        dir_entry_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.dir_var = tk.StringVar(value=self.obsidian_path)
        dir_entry = ttk.Entry(
            dir_entry_frame,
            textvariable=self.dir_var,
            style='Custom.TEntry',
            font=('Consolas', 10)
        )
        dir_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        browse_btn = ttk.Button(
            dir_entry_frame,
            text="üìÇ Procurar",
            command=self.browse_directory,
            style='Custom.TButton'
        )
        browse_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        # Frame de a√ß√µes
        actions_frame = ttk.LabelFrame(config_frame, text="A√ß√µes", style='Custom.TFrame')
        actions_frame.pack(fill=tk.X, padx=10, pady=10)
        
        actions_button_frame = ttk.Frame(actions_frame, style='Custom.TFrame')
        actions_button_frame.pack(fill=tk.X, padx=5, pady=5)
        
        scan_btn = ttk.Button(
            actions_button_frame,
            text="üîç Escanear Notas",
            command=self.scan_notes_threaded,
            style='Custom.TButton'
        )
        scan_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        test_api_btn = ttk.Button(
            actions_button_frame,
            text="üß™ Testar API",
            command=self.test_api_connection,
            style='Custom.TButton'
        )
        test_api_btn.pack(side=tk.LEFT)
    
    def create_notes_tab(self):
        """Cria a aba de gerenciamento de notas"""
        notes_frame = ttk.Frame(self.notebook, style='Custom.TFrame')
        self.notebook.add(notes_frame, text="üìù Notas")
        
        # Frame de informa√ß√µes
        info_frame = ttk.LabelFrame(notes_frame, text="Informa√ß√µes das Notas", style='Custom.TFrame')
        info_frame.pack(fill=tk.X, padx=10, pady=10)
        
        self.notes_info_label = ttk.Label(
            info_frame,
            text="Nenhuma nota carregada",
            style='Custom.TLabel',
            font=('Arial', 10)
        )
        self.notes_info_label.pack(padx=5, pady=5)
        
        # Lista de notas
        list_frame = ttk.LabelFrame(notes_frame, text="Lista de Notas", style='Custom.TFrame')
        list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Treeview para mostrar as notas
        columns = ('t√≠tulo', 'caminho', 'tamanho', 'modifica√ß√£o')
        self.notes_tree = ttk.Treeview(list_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.notes_tree.heading('t√≠tulo', text='T√≠tulo')
        self.notes_tree.heading('caminho', text='Caminho')
        self.notes_tree.heading('tamanho', text='Tamanho')
        self.notes_tree.heading('modifica√ß√£o', text='√öltima Modifica√ß√£o')
        
        self.notes_tree.column('t√≠tulo', width=200)
        self.notes_tree.column('caminho', width=300)
        self.notes_tree.column('tamanho', width=100)
        self.notes_tree.column('modifica√ß√£o', width=150)
        
        # Scrollbar para a lista
        notes_scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.notes_tree.yview)
        self.notes_tree.configure(yscrollcommand=notes_scrollbar.set)
        
        self.notes_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        notes_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    def create_status_bar(self, parent):
        """Cria a barra de status"""
        status_frame = ttk.Frame(parent, style='Custom.TFrame')
        status_frame.pack(fill=tk.X, side=tk.BOTTOM, pady=(5, 0))
        
        self.status_label = ttk.Label(
            status_frame,
            textvariable=self.status_var,
            style='Custom.TLabel',
            font=('Arial', 9)
        )
        self.status_label.pack(side=tk.LEFT)
        
        # Progressbar
        self.progress = ttk.Progressbar(
            status_frame,
            mode='indeterminate'
        )
        self.progress.pack(side=tk.RIGHT, padx=(10, 0))
    
    def handle_enter(self, event):
        """Manipula o pressionamento da tecla Enter"""
        self.send_message()
        return 'break'
    
    def insert_newline(self, event):
        """Insere uma nova linha com Ctrl+Enter"""
        self.message_entry.insert(tk.INSERT, '\n')
        return 'break'
    
    def send_message(self):
        """Envia mensagem para a IA"""
        message = self.message_entry.get(1.0, tk.END).strip()
        if not message:
            return
        
        if not self.api_key.get():
            messagebox.showwarning("Aviso", "Por favor, configure a chave da API primeiro!")
            self.notebook.select(1)  # Ir para aba de configura√ß√µes
            return
        
        if not self.notes_data:
            messagebox.showwarning("Aviso", "Nenhuma nota foi carregada. Por favor, escaneie as notas primeiro!")
            return
        
        # Limpar campo de entrada
        self.message_entry.delete(1.0, tk.END)
        
        # Adicionar mensagem do usu√°rio ao chat
        self.add_to_chat("Voc√™", message, "user")
        
        # Enviar para IA em thread separada
        threading.Thread(target=self.process_ai_request, args=(message,), daemon=True).start()
    
    def process_ai_request(self, message):
        """Processa a requisi√ß√£o para a IA"""
        try:
            self.update_status("Processando mensagem...")
            self.progress.start()
            
            # Preparar contexto das notas
            context = self.prepare_context(message)
            
            # Fazer requisi√ß√£o para API
            response = self.call_gemini_api(message, context)
            
            # Adicionar resposta ao chat
            self.root.after(0, self.add_to_chat, "IA", response, "ai")
            
        except Exception as e:
            error_msg = f"Erro ao processar mensagem: {str(e)}"
            self.root.after(0, self.add_to_chat, "Sistema", error_msg, "system")
        finally:
            self.root.after(0, self.progress.stop)
            self.root.after(0, self.update_status, "Pronto para usar")
    
    def prepare_context(self, user_message):
        """Prepara o contexto das notas para enviar √† IA"""
        # Buscar notas relevantes baseadas na mensagem do usu√°rio
        relevant_notes = self.find_relevant_notes(user_message)
        
        context = "Base de conhecimento das suas anota√ß√µes:\n\n"
        
        for note in relevant_notes[:5]:  # Limitar a 5 notas mais relevantes
            context += f"=== {note['t√≠tulo']} ===\n"
            context += f"Arquivo: {note['caminho']}\n"
            context += f"Conte√∫do: {note['conte√∫do'][:1000]}...\n\n"  # Limitar conte√∫do
        
        return context
    
    def find_relevant_notes(self, query):
        """Encontra notas relevantes baseadas na consulta"""
        query_lower = query.lower()
        scored_notes = []
        
        for note in self.notes_data:
            score = 0
            title_lower = note['t√≠tulo'].lower()
            content_lower = note['conte√∫do'].lower()
            
            # Pontua√ß√£o baseada em palavras-chave no t√≠tulo
            for word in query_lower.split():
                if word in title_lower:
                    score += 3
                if word in content_lower:
                    score += 1
            
            if score > 0:
                scored_notes.append((score, note))
        
        # Ordenar por pontua√ß√£o e retornar apenas as notas
        scored_notes.sort(key=lambda x: x[0], reverse=True)
        return [note for score, note in scored_notes]
    
    def call_gemini_api(self, message, context):
        """Faz chamada para a API do Gemini"""
        api_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent"
        
        headers = {
            "Content-Type": "application/json",
        }
        
        prompt = f"""Voc√™ √© um assistente inteligente especializado em ajudar com anota√ß√µes pessoais do Obsidian.

Sua tarefa √© responder perguntas sobre o conte√∫do das anota√ß√µes, indicando sempre em qual arquivo a informa√ß√£o foi encontrada.

**IMPORTANTE:** Use formata√ß√£o Markdown em suas respostas para melhor legibilidade:
- Use **negrito** para destacar informa√ß√µes importantes
- Use *it√°lico* para √™nfase
- Use `c√≥digo` para nomes de arquivos, fun√ß√µes, vari√°veis
- Use ### para subt√≠tulos
- Use > para cita√ß√µes importantes
- Use listas quando apropriado

{context}

**Pergunta do usu√°rio:** {message}

Por favor, responda de forma clara e √∫til, sempre mencionando as fontes (nomes dos arquivos) quando referenciar informa√ß√µes espec√≠ficas das anota√ß√µes. Use formata√ß√£o Markdown para tornar sua resposta mais leg√≠vel e organizada."""

        data = {
            "contents": [{
                "parts": [{
                    "text": prompt
                }]
            }]
        }
        
        response = requests.post(
            f"{api_url}?key={self.api_key.get()}",
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            return result['candidates'][0]['content']['parts'][0]['text']
        else:
            raise Exception(f"Erro na API: {response.status_code} - {response.text}")
    
    def add_to_chat(self, sender, message, tag):
        """Adiciona mensagem ao hist√≥rico do chat com suporte a Markdown"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        self.chat_history.insert(tk.END, f"[{timestamp}] {sender}:\n", tag)
        
        # Se for mensagem da IA, aplicar formata√ß√£o Markdown
        if tag == "ai":
            self.insert_markdown_text(message)
        else:
            self.chat_history.insert(tk.END, f"{message}\n\n")
        
        # Auto-scroll para o final
        self.chat_history.see(tk.END)
        
        # Focar no campo de entrada
        self.message_entry.focus_set()
    
    def insert_markdown_text(self, text):
        """Insere texto com formata√ß√£o Markdown no chat"""
        import re
        
        lines = text.split('\n')
        
        for line in lines:
            # Verificar se √© um cabe√ßalho
            if line.startswith('### '):
                self.chat_history.insert(tk.END, line[4:] + '\n', 'heading3')
            elif line.startswith('## '):
                self.chat_history.insert(tk.END, line[3:] + '\n', 'heading2')
            elif line.startswith('# '):
                self.chat_history.insert(tk.END, line[2:] + '\n', 'heading1')
            elif line.startswith('> '):
                # Cita√ß√£o
                self.chat_history.insert(tk.END, line[2:] + '\n', 'quote')
            elif line.strip().startswith('```') and line.strip().endswith('```'):
                # Bloco de c√≥digo inline simples
                code_content = line.strip()[3:-3]
                self.chat_history.insert(tk.END, code_content + '\n', 'code_block')
            elif '```' in line:
                # In√≠cio ou fim de bloco de c√≥digo
                if line.strip() == '```':
                    self.chat_history.insert(tk.END, '\n')
                else:
                    # C√≥digo com linguagem especificada
                    self.chat_history.insert(tk.END, line + '\n', 'code_block')
            else:
                # Processar formata√ß√£o inline
                self.process_inline_formatting(line + '\n')
    
    def process_inline_formatting(self, text):
        """Processa formata√ß√£o inline como negrito, it√°lico, c√≥digo"""
        import re
        
        # Lista para armazenar segmentos de texto e suas formata√ß√µes
        segments = []
        current_pos = 0
        
        # Padr√µes de formata√ß√£o
        patterns = [
            (r'\*\*(.*?)\*\*', 'bold'),      # **texto**
            (r'\*(.*?)\*', 'italic'),        # *texto*
            (r'`(.*?)`', 'code'),            # `c√≥digo`
            (r'\[(.*?)\]\((.*?)\)', 'link'), # [texto](link)
        ]
        
        # Encontrar todas as formata√ß√µes
        all_matches = []
        for pattern, tag in patterns:
            for match in re.finditer(pattern, text):
                all_matches.append((match.start(), match.end(), match, tag))
        
        # Ordenar por posi√ß√£o
        all_matches.sort(key=lambda x: x[0])
        
        # Processar texto
        last_end = 0
        
        for start, end, match, tag in all_matches:
            # Adicionar texto normal antes da formata√ß√£o
            if start > last_end:
                normal_text = text[last_end:start]
                if normal_text:
                    self.chat_history.insert(tk.END, normal_text)
            
            # Adicionar texto formatado
            if tag == 'link':
                # Para links, usar apenas o texto do link
                link_text = match.group(1)
                self.chat_history.insert(tk.END, link_text, tag)
            else:
                # Para outras formata√ß√µes, usar o conte√∫do capturado
                formatted_text = match.group(1)
                self.chat_history.insert(tk.END, formatted_text, tag)
            
            last_end = end
        
        # Adicionar texto restante
        if last_end < len(text):
            remaining_text = text[last_end:]
            self.chat_history.insert(tk.END, remaining_text)
    
    def clear_chat(self):
        """Limpa o hist√≥rico do chat"""
        self.chat_history.delete(1.0, tk.END)
    
    def scan_notes_threaded(self):
        """Executa escaneamento de notas em thread separada"""
        threading.Thread(target=self.scan_notes, daemon=True).start()
    
    def scan_notes(self):
        """Escaneia e processa todas as notas Markdown"""
        try:
            self.root.after(0, self.update_status, "Escaneando notas...")
            self.root.after(0, self.progress.start)
            
            obsidian_path = Path(self.dir_var.get())
            
            if not obsidian_path.exists():
                raise Exception(f"Diret√≥rio n√£o encontrado: {obsidian_path}")
            
            notes = []
            
            # Buscar todos os arquivos .md, ignorando a pasta .obsidian
            for md_file in obsidian_path.rglob("*.md"):
                if ".obsidian" in str(md_file):
                    continue
                
                try:
                    with open(md_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    title = md_file.stem
                    relative_path = str(md_file.relative_to(obsidian_path))
                    
                    # Estat√≠sticas do arquivo
                    stat = md_file.stat()
                    size = self.format_file_size(stat.st_size)
                    modified = datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M")
                    
                    notes.append({
                        't√≠tulo': title,
                        'conte√∫do': content,
                        'caminho': relative_path,
                        'tamanho': size,
                        'modifica√ß√£o': modified,
                        'caminho_completo': str(md_file)
                    })
                    
                except Exception as e:
                    print(f"Erro ao ler arquivo {md_file}: {e}")
            
            # Salvar em CSV
            self.save_notes_to_csv(notes)
            
            # Atualizar dados e interface
            self.notes_data = notes
            self.root.after(0, self.update_notes_display)
            self.root.after(0, self.update_status, f"‚úÖ {len(notes)} notas carregadas com sucesso!")
            
        except Exception as e:
            error_msg = f"Erro ao escanear notas: {str(e)}"
            self.root.after(0, self.update_status, f"‚ùå {error_msg}")
            self.root.after(0, messagebox.showerror, "Erro", error_msg)
        finally:
            self.root.after(0, self.progress.stop)
    
    def save_notes_to_csv(self, notes):
        """Salva as notas em um arquivo CSV"""
        with open(self.csv_file, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['t√≠tulo', 'conte√∫do', 'caminho', 'tamanho', 'modifica√ß√£o']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            writer.writeheader()
            for note in notes:
                writer.writerow({
                    't√≠tulo': note['t√≠tulo'],
                    'conte√∫do': note['conte√∫do'],
                    'caminho': note['caminho'],
                    'tamanho': note['tamanho'],
                    'modifica√ß√£o': note['modifica√ß√£o']
                })
    
    def update_notes_display(self):
        """Atualiza a exibi√ß√£o das notas na interface"""
        # Limpar lista atual
        for item in self.notes_tree.get_children():
            self.notes_tree.delete(item)
        
        # Adicionar notas
        for note in self.notes_data:
            self.notes_tree.insert('', tk.END, values=(
                note['t√≠tulo'],
                note['caminho'],
                note['tamanho'],
                note['modifica√ß√£o']
            ))
        
        # Atualizar informa√ß√µes
        total_notes = len(self.notes_data)
        total_chars = sum(len(note['conte√∫do']) for note in self.notes_data)
        
        info_text = f"üìä Total: {total_notes} notas | {self.format_file_size(total_chars)} de conte√∫do"
        self.notes_info_label.config(text=info_text)
    
    def format_file_size(self, size_bytes):
        """Formata o tamanho do arquivo em formato leg√≠vel"""
        if size_bytes < 1024:
            return f"{size_bytes} B"
        elif size_bytes < 1024**2:
            return f"{size_bytes/1024:.1f} KB"
        else:
            return f"{size_bytes/(1024**2):.1f} MB"
    
    def check_and_load_notes(self):
        """Verifica se existe CSV de notas e carrega"""
        if os.path.exists(self.csv_file):
            threading.Thread(target=self.load_notes_from_csv, daemon=True).start()
    
    def load_notes_from_csv(self):
        """Carrega notas do arquivo CSV"""
        try:
            notes = []
            with open(self.csv_file, 'r', encoding='utf-8') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    notes.append(row)
            
            self.notes_data = notes
            self.root.after(0, self.update_notes_display)
            self.root.after(0, self.update_status, f"‚úÖ {len(notes)} notas carregadas do arquivo existente")
            
        except Exception as e:
            print(f"Erro ao carregar CSV: {e}")
    
    def browse_directory(self):
        """Abre di√°logo para selecionar diret√≥rio"""
        directory = filedialog.askdirectory(initialdir=self.obsidian_path)
        if directory:
            self.dir_var.set(directory)
            self.obsidian_path = directory
    
    def save_api_key(self):
        """Salva a chave da API"""
        self.save_config()
        messagebox.showinfo("Sucesso", "Chave da API salva com sucesso!")
    
    def test_api_connection(self):
        """Testa a conex√£o com a API"""
        if not self.api_key.get():
            messagebox.showwarning("Aviso", "Por favor, insira a chave da API primeiro!")
            return
        
        def test_connection():
            try:
                self.root.after(0, self.update_status, "Testando conex√£o com API...")
                self.root.after(0, self.progress.start)
                
                response = self.call_gemini_api("Ol√°, voc√™ est√° funcionando?", "")
                
                self.root.after(0, messagebox.showinfo, "Sucesso", "‚úÖ Conex√£o com API funcionando corretamente!")
                self.root.after(0, self.update_status, "API testada com sucesso")
                
            except Exception as e:
                error_msg = f"‚ùå Erro na conex√£o: {str(e)}"
                self.root.after(0, messagebox.showerror, "Erro", error_msg)
                self.root.after(0, self.update_status, "Erro na conex√£o com API")
            finally:
                self.root.after(0, self.progress.stop)
        
        threading.Thread(target=test_connection, daemon=True).start()
    
    def update_status(self, message):
        """Atualiza a mensagem de status"""
        self.status_var.set(message)
    
    def save_config(self):
        """Salva configura√ß√µes no arquivo"""
        config = {
            'api_key': self.api_key.get(),
            'obsidian_path': self.obsidian_path
        }
        
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config, f)
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar configura√ß√µes: {e}")
    
    def load_config(self):
        """Carrega configura√ß√µes do arquivo"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                    self.api_key.set(config.get('api_key', ''))
                    self.obsidian_path = config.get('obsidian_path', self.obsidian_path)
        except Exception as e:
            print(f"Erro ao carregar configura√ß√µes: {e}")
    
    def run(self):
        """Inicia a aplica√ß√£o"""
        # Mensagem de boas-vindas
        welcome_msg = """üéâ Bem-vindo ao Obsidian AI Manager!

Este sistema permite que voc√™ converse com suas anota√ß√µes do Obsidian usando IA.

## Para come√ßar:
1. **Configure** sua chave da API do Gemini na aba 'Configura√ß√µes'
2. **Escaneie** suas notas clicando em 'Escanear Notas'
3. **Volte** para esta aba e comece a fazer perguntas!

### üí° Exemplos de perguntas:
- *"Quais anota√ß√µes falam sobre Python?"*
- *"Onde est√° a informa√ß√£o sobre reuni√£o do projeto X?"*
- *"Resuma o conte√∫do das minhas notas sobre machine learning"*

> **Dica:** A IA agora suporta formata√ß√£o Markdown nas respostas!
> Use `c√≥digo` entre crases, **negrito** e *it√°lico* normalmente.
"""
        
        self.add_to_chat("Sistema", welcome_msg, "system")
        
        # Focar no campo de entrada
        self.message_entry.focus_set()
        
        # Iniciar loop principal
        self.root.mainloop()

if __name__ == "__main__":
    app = ObsidianAIManager()
    app.run()
